include("networkGraphs.jl")
using .NetworkGraphs  
using Graphs
using JSON
using TimesDates, Dates
using Compose

function testLoop(net::Network, testType::Function, t_max::Float64, p::Float64, m::UInt, retries::UInt, step::Float64)
  results = Dict(:p => p, :p => m, :t_max => [], :increment => [i for i in 0:step:10step], :rel_avgs => [])
  for t_scale in 1:10
    curr_t::Float64 = t_max * t_scale / 10
    for s in 0:step:10step
      reliabilites::Array{Float64} = []
      for i in 1:retries
        println("T:$curr_t, step:$s, try:$i/$retries")
        rel = testType(net, curr_t, p, m, Float64(s))
        push!(reliabilites, rel)
      end 
      push!(results[:rel_avgs], sum(reliabilites) / length(reliabilites))
    end
    push!(results[:t_max], curr_t)
  end
  now = Dates.now()
  isdir("./jsons") || mkdir("./jsons")
  open("./jsons/$(testType)-t$t_max-p$p-m$m-s$step-k$retries-$now.json", "w") do io
    JSON.print(io, results)
  end;
end

function trafficTest(net::Network, t_max::Float64, p::Float64, m::UInt, val::Float64)
  test_net = Network(net)
  test_net = addPackets(test_net, val)
  rel = networkReliability(test_net, t_max, p, m, UInt64(1000))
  test_net = nothing
  return rel
end

function bandwidthTest(net::Network, t_max::Float64, p::Float64, m::UInt, val::Float64)
  test_net = Network(net)
  test_net = addBandwidth(test_net, val)
  rel = networkReliability(test_net, t_max, p, m, UInt64(1000))
  test_net = nothing
  return rel
end

function newEdgeTest(net::Network, t_max::Float64, p::Float64, m::UInt, val::Float64)
  test_net = Network(net)
  for i in 1:trunc(UInt, 10val)
    test_net = addEdge(test_net)
  end
  rel = networkReliability(test_net, t_max, p, m, UInt64(1000))
  test_net = nothing
  return rel
end

function usage()
  println("Please specify at least 5 arguments.")
  println("Usage: julia main.jl [t_max] [p] [m] [k] [step]")
end

function main(args::Array{String})
  testNetwork::Network = asymmetricSameResistances12_8Network(UInt(10), 0.95, UInt(1000), UInt(5), UInt(1))
  plotDoubleCyclicGraph(testNetwork, 12)
  # harcoded_traffic_array::Array{UInt, 2} = [0x0000000000000000 0x0000000000000006 0x0000000000000001 0x0000000000000003 0x0000000000000004 0x0000000000000009 0x0000000000000005 0x0000000000000002 0x0000000000000002 0x0000000000000004 0x0000000000000009 0x0000000000000001 0x0000000000000007 0x0000000000000007 0x0000000000000003 0x0000000000000008 0x0000000000000002 0x0000000000000003 0x0000000000000002 0x0000000000000009; 0x0000000000000003 0x0000000000000000 0x0000000000000008 0x0000000000000001 0x0000000000000007 0x0000000000000006 0x0000000000000003 0x0000000000000001 0x0000000000000003 0x0000000000000004 0x0000000000000008 0x0000000000000005 0x0000000000000006 0x0000000000000004 0x0000000000000002 0x0000000000000002 0x0000000000000008 0x0000000000000001 0x0000000000000005 0x0000000000000006; 0x0000000000000009 0x0000000000000008 0x0000000000000000 0x0000000000000009 0x0000000000000004 0x0000000000000002 0x0000000000000005 0x0000000000000003 0x0000000000000009 0x0000000000000005 0x0000000000000006 0x0000000000000007 0x0000000000000007 0x0000000000000001 0x0000000000000004 0x0000000000000003 0x0000000000000002 0x0000000000000006 0x0000000000000003 0x0000000000000009; 0x0000000000000002 0x0000000000000002 0x0000000000000001 0x0000000000000000 0x0000000000000003 0x0000000000000001 0x0000000000000004 0x0000000000000007 0x0000000000000009 0x0000000000000005 0x0000000000000006 0x0000000000000001 0x0000000000000008 0x0000000000000009 0x0000000000000007 0x0000000000000001 0x0000000000000005 0x0000000000000009 0x0000000000000009 0x0000000000000006; 0x0000000000000001 0x0000000000000005 0x0000000000000007 0x0000000000000001 0x0000000000000000 0x0000000000000008 0x0000000000000004 0x0000000000000001 0x0000000000000005 0x0000000000000003 0x0000000000000002 0x0000000000000006 0x0000000000000001 0x0000000000000009 0x0000000000000003 0x0000000000000009 0x0000000000000007 0x0000000000000007 0x0000000000000001 0x0000000000000005; 0x0000000000000001 0x0000000000000008 0x0000000000000004 0x0000000000000003 0x0000000000000009 0x0000000000000000 0x0000000000000005 0x0000000000000006 0x0000000000000003 0x0000000000000005 0x0000000000000002 0x0000000000000007 0x0000000000000008 0x0000000000000003 0x0000000000000006 0x0000000000000007 0x0000000000000001 0x0000000000000004 0x0000000000000006 0x0000000000000006; 0x0000000000000003 0x0000000000000007 0x0000000000000001 0x0000000000000008 0x0000000000000002 0x0000000000000001 0x0000000000000000 0x0000000000000003 0x0000000000000006 0x0000000000000008 0x0000000000000003 0x0000000000000009 0x0000000000000005 0x0000000000000008 0x0000000000000007 0x0000000000000004 0x0000000000000001 0x0000000000000006 0x0000000000000005 0x0000000000000005; 0x0000000000000006 0x0000000000000004 0x0000000000000009 0x0000000000000001 0x0000000000000005 0x0000000000000002 0x0000000000000009 0x0000000000000000 0x0000000000000009 0x0000000000000004 0x0000000000000002 0x0000000000000003 0x0000000000000009 0x0000000000000006 0x0000000000000002 0x0000000000000006 0x0000000000000001 0x0000000000000002 0x0000000000000001 0x0000000000000001; 0x0000000000000009 0x0000000000000002 0x0000000000000005 0x0000000000000005 0x0000000000000003 0x0000000000000009 0x0000000000000004 0x0000000000000002 0x0000000000000000 0x0000000000000002 0x0000000000000008 0x0000000000000006 0x0000000000000006 0x0000000000000009 0x0000000000000003 0x0000000000000007 0x0000000000000001 0x0000000000000005 0x0000000000000005 0x0000000000000004; 0x0000000000000005 0x0000000000000004 0x0000000000000004 0x0000000000000005 0x0000000000000007 0x0000000000000003 0x0000000000000009 0x0000000000000006 0x0000000000000006 0x0000000000000000 0x0000000000000009 0x0000000000000007 0x0000000000000004 0x0000000000000002 0x0000000000000007 0x0000000000000003 0x0000000000000008 0x0000000000000008 0x0000000000000002 0x0000000000000009; 0x0000000000000008 0x0000000000000001 0x0000000000000004 0x0000000000000006 0x0000000000000003 0x0000000000000001 0x0000000000000009 0x0000000000000008 0x0000000000000001 0x0000000000000001 0x0000000000000000 0x0000000000000008 0x0000000000000009 0x0000000000000002 0x0000000000000003 0x0000000000000002 0x0000000000000004 0x0000000000000003 0x0000000000000004 0x0000000000000004; 0x0000000000000005 0x0000000000000009 0x0000000000000006 0x0000000000000001 0x0000000000000005 0x0000000000000007 0x0000000000000007 0x0000000000000002 0x0000000000000003 0x0000000000000001 0x0000000000000002 0x0000000000000000 0x0000000000000008 0x0000000000000001 0x0000000000000006 0x0000000000000007 0x0000000000000006 0x0000000000000006 0x0000000000000006 0x0000000000000008; 0x0000000000000008 0x0000000000000008 0x0000000000000006 0x0000000000000009 0x0000000000000007 0x0000000000000001 0x0000000000000009 0x0000000000000002 0x0000000000000001 0x0000000000000007 0x0000000000000005 0x0000000000000001 0x0000000000000000 0x0000000000000002 0x0000000000000004 0x0000000000000007 0x0000000000000003 0x0000000000000002 0x0000000000000003 0x0000000000000004; 0x0000000000000007 0x0000000000000005 0x0000000000000008 0x0000000000000008 0x0000000000000001 0x0000000000000008 0x0000000000000007 0x0000000000000002 0x0000000000000009 0x0000000000000001 0x0000000000000006 0x0000000000000001 0x0000000000000009 0x0000000000000000 0x0000000000000001 0x0000000000000008 0x0000000000000002 0x0000000000000005 0x0000000000000001 0x0000000000000003; 0x0000000000000007 0x0000000000000002 0x0000000000000006 0x0000000000000005 0x0000000000000009 0x0000000000000006 0x0000000000000005 0x0000000000000002 0x0000000000000005 0x0000000000000001 0x0000000000000008 0x0000000000000004 0x0000000000000003 0x0000000000000002 0x0000000000000000 0x0000000000000007 0x0000000000000004 0x0000000000000004 0x0000000000000008 0x0000000000000007; 0x0000000000000003 0x0000000000000009 0x0000000000000007 0x0000000000000003 0x0000000000000002 0x0000000000000004 0x0000000000000004 0x0000000000000004 0x0000000000000002 0x0000000000000008 0x0000000000000003 0x0000000000000009 0x0000000000000003 0x0000000000000005 0x0000000000000001 0x0000000000000000 0x0000000000000002 0x0000000000000004 0x0000000000000004 0x0000000000000004; 0x0000000000000009 0x0000000000000003 0x0000000000000001 0x0000000000000004 0x0000000000000003 0x0000000000000008 0x0000000000000001 0x0000000000000007 0x0000000000000008 0x0000000000000005 0x0000000000000003 0x0000000000000009 0x0000000000000001 0x0000000000000007 0x0000000000000001 0x0000000000000003 0x0000000000000000 0x0000000000000002 0x0000000000000003 0x0000000000000005; 0x0000000000000006 0x0000000000000002 0x0000000000000003 0x0000000000000003 0x0000000000000001 0x0000000000000006 0x0000000000000007 0x0000000000000007 0x0000000000000007 0x0000000000000009 0x0000000000000001 0x0000000000000001 0x0000000000000007 0x0000000000000002 0x0000000000000001 0x0000000000000001 0x0000000000000009 0x0000000000000000 0x0000000000000009 0x0000000000000003; 0x0000000000000001 0x0000000000000005 0x0000000000000003 0x0000000000000004 0x0000000000000005 0x0000000000000006 0x0000000000000007 0x0000000000000002 0x0000000000000005 0x0000000000000004 0x0000000000000007 0x0000000000000004 0x0000000000000004 0x0000000000000006 0x0000000000000009 0x0000000000000002 0x0000000000000007 0x0000000000000008 0x0000000000000000 0x0000000000000008; 0x0000000000000007 0x0000000000000002 0x0000000000000002 0x0000000000000004 0x0000000000000002 0x0000000000000003 0x0000000000000006 0x0000000000000004 0x0000000000000007 0x0000000000000003 0x0000000000000008 0x0000000000000009 0x0000000000000005 0x0000000000000006 0x0000000000000003 0x0000000000000005 0x0000000000000002 0x0000000000000009 0x0000000000000007 0x0000000000000000]
  replaceTraffic!(testNetwork, harcoded_traffic_array)
  now = Dates.now()
  draw(PNG("graph-$now.png", 16cm, 16cm), plotDoubleCyclicGraph(testNetwork, 12))
  if (length(args) < 5) 
    usage()
    exit(1)
  end
  try
    t_max = parse(Float64, args[1])
    p = parse(Float64, args[2])
    m = parse(UInt, args[3])
    retries = parse(UInt, args[4])
    step = parse(Float64, args[5])
    testLoop(testNetwork, trafficTest, t_max, p, m, retries, step)
    testLoop(testNetwork, bandwidthTest, t_max, p, m, retries, step)
    testLoop(testNetwork, newEdgeTest, t_max, p, m, retries, step)
  catch e
    println(e)
    usage()
  end
end

main(ARGS)